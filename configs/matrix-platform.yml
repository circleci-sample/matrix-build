orbs:
  node: circleci/node@1.1.6

parameters:
  tag:
    default: '10'
    type: string
  run-main-workflow:
    default: false
    type: boolean
  run-deploy-job:
    default: false
    type: boolean
  platform:
    default: linux
    type: string

executors:
  alpine:
    docker:
      - image: alpine
  linux:
    docker:
      - image: circleci/node:<< pipeline.parameters.tag >>
  mac:
    macos:
      xcode: 11.3.0

version: 2.1
jobs:
  install_deps:
    executor: << pipeline.parameters.platform >>
    steps:
      - node/install-node:
          version: << pipeline.parameters.tag >>
      - checkout
      - restore_cache:
          keys:
            - v1-npm-{{ .Branch }}-{{ checksum "package-lock.json" }}
            - v1-npm-{{ .Branch }}-
            - v1-npm-
      - run: npm install
      - save_cache:
          paths:
            - node_modules
          key: v1-npm-{{ .Branch }}-{{ checksum "package-lock.json" }}
      - persist_to_workspace:
          root: ./
          paths:
            - node_modules

  test:
    executor: << pipeline.parameters.platform >>
    steps:
      - node/install-node:
          version: << pipeline.parameters.tag >>
      - checkout
      - attach_workspace:
          at: ./
      - run: npm run test

  build:
    executor: << pipeline.parameters.platform >>
    steps:
      - node/install-node:
          version: << pipeline.parameters.tag >>
      - checkout
      - attach_workspace:
          at: ./
      - run: npm run build
      - when:
          condition: << pipeline.parameters.run-deploy-job >>
          steps:
            - persist_to_workspace:
                root: ./
                paths:
                  - lib
                  - node_modules

  deploy:
    docker:
      - image: circleci/node:<< pipeline.parameters.tag >>
    steps:
      - node/install-node:
          version: << pipeline.parameters.tag >>
      - when:
          condition: << pipeline.parameters.run-deploy-job >>
          steps:
            - checkout
            - attach_workspace:
                at: ./
            - run: npm run deploy
      - unless:
          condition: << pipeline.parameters.run-deploy-job >>
          steps:
            - run: echo "No deployment on Node v<< pipeline.parameters.tag >>"

  trigger-main-workflows:
    machine:
      image: ubuntu-1604:201903-01
    parameters:
      deploy-node-version:
        default: '10'
        type: string
      deploy-platform:
        default: linux
        type: string
    steps:
      - run:
          name: Trigger main worflow
          command: |
            VCS_TYPE=$(echo ${CIRCLE_BUILD_URL} | cut -d '/' -f 4)

            for NODE_VERSION in 8 10 12
            do
                for PLATFORM in mac alpine linux
                do
                    PIIPELINE_PARAM_MAP="{\"run-main-workflow\": true, \"tag\":\"$NODE_VERSION\", \"platform\":\"$PLATFORM\"}"
                    if [ "$NODE_VERSION" = << parameters.deploy-node-version >> ] && [ "$PLATFORM" = << parameters.deploy-platform >> ]
                    then
                        PIIPELINE_PARAM_MAP="{\"run-main-workflow\": true, \"tag\":\"$NODE_VERSION\", \"platform\":\"$PLATFORM\", \"run-deploy-job\": true}"
                    fi
                    curl -u ${CIRCLE_TOKEN}: -X POST --header "Content-Type: application/json" -d "{
                      \"branch\": \"${CIRCLE_BRANCH}\",
                      \"parameters\": ${PIIPELINE_PARAM_MAP}
                    }" "https://circleci.com/api/v2/project/${VCS_TYPE}/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/pipeline"
                done
            done

workflows:
  version: 2
  matrix:
    unless: << pipeline.parameters.run-main-workflow >>
    jobs:
      - trigger-main-workflows
  main:
    when: << pipeline.parameters.run-main-workflow >>
    jobs:
      - build:
          name: build-<< pipeline.parameters.tag >>-on-<< pipeline.parameters.platform >>
      - test:
          name: test-<< pipeline.parameters.tag >>-on-<< pipeline.parameters.platform >>
      - deploy:
          requires:
            - build-<< pipeline.parameters.tag >>-on-<< pipeline.parameters.platform >>
            - test-<< pipeline.parameters.tag >>-on-<< pipeline.parameters.platform >>
